package sparqlGenerator;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;

import org.neo4j.driver.v1.AuthTokens;
import org.neo4j.driver.v1.Driver;
import org.neo4j.driver.v1.GraphDatabase;
import org.neo4j.driver.v1.Record;
import org.neo4j.driver.v1.Session;
import org.neo4j.driver.v1.StatementResult;
import org.neo4j.driver.v1.Transaction;

public class ConnToNeo4j {
	private final Driver driver;
	private final String uri = "bolt://localhost:7687";
	private final String user = "";
	private final String password = "";
	
	public ConnToNeo4j()
    {
        driver = GraphDatabase.driver( uri, AuthTokens.basic( user, password ) );
    }
	
	public void registerShutdownHook()
	  {
	      Runtime.getRuntime().addShutdownHook( new Thread()
	      {
	          @Override
	          public void run()
	          {
	             driver.close();
	          }
	      } );
	  }
	
	public void writeIn(String id) {
		String url = SparqlGenerator.getInfo(id);
		String iri = "";
		try {
			iri = URLEncoder.encode(url,"UTF-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		String site = "https://query.wikidata.org/sparql?format=json&" + "query=" + iri;
		
		try(Session session = driver.session()){
			try (Transaction tx = session.beginTransaction())
            {
                tx.run(String.format("call apoc.load.json(\"%s\")YIELD value as rows\r\n" + 
                		"with rows, rows.results.bindings as nodes\r\n" + 
                		"unwind nodes as node\r\n" + 
                		"with node, node.p as p, node.oDes as oDes, node.itemLabel as itemLabel, node.item as item, node.itemDes as itemDes, node.pLabel as pLabel, node.pDes as pDes, node.o as o, node.oLabel as oLabel\r\n" + 
                		"MERGE(s:EntityRoot{id:item.value}) ON CREATE SET s.Des=itemDes.value,s.label=itemLabel.value\r\n" + 
                		"CREATE(h:Entity{id:o.value,itemDes:oDes.value,itemLabel:oLabel.value})\r\n" + 
                		"CREATE(s)-[r:Predicate]->(h)\r\n" + 
                		"SET r.id = p.value,r.Des=pDes.value,r.label=pLabel.value\r\n", site));
                tx.success();  // Mark this write as successful.
            }
			
		}
	}
	
	public boolean exist(String id) {
		boolean flag = false;
		try(Session session = driver.session()){
			StatementResult result = session.run(String.format("match(n:EntityRoot) where right(n.id,%d) = \"%s\" return n", id.length(),id));
			flag = result.hasNext();
			result.consume();
		}
		return flag;
	}
	
	public void getSubject(String id) {
		try(Session session = driver.session()){
			StatementResult result = session.run(String.format("match(n:EntityRoot) where right(n.id,%d) = \"%s\" return n", id.length(),id));
			while(result.hasNext()) {
				Record record = result.next();
				System.out.println("Label\tDescription");
				System.out.println(record.get(0).get("label").asString() +
						record.get(0).get("Des").asString());
			}
		}
		System.out.println("");
	}
	
	//id: the id of the property.
	//the structure of the "record": get(0) ->id
	//								 get(1) ->label
	//								 get(2) ->description
	public void getProps(String id) {
		try(Session session = driver.session()){
			StatementResult result = session.run(String.format("match(n:EntityRoot) where right(n.id,%d) = \"%s\" match(n)-[p:Predicate]->() return distinct p", id.length(),id));
			System.out.println("ID\tLabel\tDescription\t");
			while(result.hasNext()) {
				Record record = result.next();
				System.out.println(record.get(0).get("id").asString() +"\t" + record.get(0).get("label").asString() +"\t"+
						record.get(0).get("Des").asString());
			}
			System.out.println("");
		}
	}
	
	//sid: id of the entity
	//pid: id of the property
	//the structure of "record": get(0)->id of the object
	//							 get(1)->the label of the object
	//							 get(2)->the description of the object
	public void getObjects(String sid, String pid) {
		try(Session session = driver.session()){
			StatementResult result = session.run(String.format("match(n:EntityRoot) where right(n.id,%d) = \"%s\""
					+ "match (n)-[r:Predicate]->(o) where right(r.id,%d) = \"%s\" return distinct o", sid.length(), sid, pid.length(), pid));
			System.out.println("ID\tLabel\tDescription\t");
			while(result.hasNext()) {
				Record record = result.next();
				System.out.println(record.get(0).get("id").asString() +"\t"+ record.get(0).get("itemLabel").asString() +"\t"+
						record.get(0).get("itemDes").asString());
			}
			System.out.println("");
		}
	}
	
	//id: the id of the entity
	//spq: the sparql generated by searchSimilarEntities(String id, ArrayList<String> props) in the class SparqlGenerator.
	//returns: info of similar objects.
	public void getSimilarObjects(String id, String spq) {
		String iri = "";
		String site = "";
		try {
			iri = URLEncoder.encode(spq,"UTF-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		site = "https://query.wikidata.org/sparql?format=json&" + "query=" + iri;
		try(Session session = driver.session()){
			StatementResult result = session.run(String.format("call apoc.load.json(\"%s\")YIELD value as rows\r\n" + 
					"with rows, rows.results.bindings as nodes\r\n" + 
					"unwind nodes as node\r\n" + 
					"with node, node.oDes as oDes, node.o as o, node.oLabel as oLabel\r\n" + 
					"MATCH(s:EntityRoot) where right(s.id, %d) = \"%s\"\r\n" + 
					"CREATE(h:Entity{id:o.value,itemDes:oDes.value,itemLabel:oLabel.value})\r\n" + 
					"CREATE(s)-[r:SimilarTo]->(h)\r\n" + 
					"return distinct h", site, id.length(), id));
			if(!result.hasNext()) {
				System.out.println("No similar objects!");
			}
			while(result.hasNext()) {
				Record record = result.next();
				System.out.println(record.get(0).get("id").asString() +"\t"+ record.get(0).get("itemLabel").asString() +"\t"+
						record.get(0).get("itemDes").asString());
			}
			
		}
		
	}

}
